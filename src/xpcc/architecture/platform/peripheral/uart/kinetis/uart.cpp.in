// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#include "../../../device.hpp"
#include "uart_hal_{{ id }}.hpp"
#include "uart_{{ id }}.hpp"

%% if parameters.buffered
#include <xpcc/architecture/driver/atomic.hpp>

namespace
{
	static xpcc::atomic::Queue<char, {{ parameters.rx_buffer }}> rxBuffer;
	static xpcc::atomic::Queue<char, {{ parameters.tx_buffer }}> txBuffer;
	static bool isBlocking = true;
}
%% endif

%% if parameters.buffered
void
xpcc::kinetis::Uart{{ id }}::initializeBuffered(uint32_t interruptPriority,
											bool blocking)
{
	UartHal{{ id }}::enableInterruptVector(true, interruptPriority);
	UartHal{{ id }}::enableInterrupt(Interrupt::RxNotEmpty);
	isBlocking = blocking;
}
%% endif

void
xpcc::kinetis::Uart{{ id }}::writeBlocking(uint8_t data)
{
	while(!UartHal{{ id }}::isTransmitRegisterEmpty());
	UartHal{{ id }}::write(data);
}

void
xpcc::kinetis::Uart{{ id }}::writeBlocking(const uint8_t *data, std::size_t length)
{
	while (length-- != 0) {
		writeBlocking(*data++);
	}
}

void
xpcc::kinetis::Uart{{ id }}::flushWriteBuffer()
{
%% if parameters.buffered
	while(!isWriteFinished());
%% else
	return;
%% endif
}

bool
xpcc::kinetis::Uart{{ id }}::write(uint8_t data)
{
%% if parameters.buffered
	if(txBuffer.isEmpty() && UartHal{{ id }}::isTransmitRegisterEmpty()) {
		UartHal{{ id }}::write(data);
	} else {
		while (!txBuffer.push(data)) {
			if (!isBlocking) {	// if queue is full => block
				return false;	// if not supposed ot block return false
			}
		}
		// Disable interrupts while enabling the transmit interrupt
		atomic::Lock lock;
		// Transmit Data Register Empty Interrupt Enable
		UartHal{{ id }}::enableInterrupt(Interrupt::TxEmpty);
	}
	return true;
%% else
	if(UartHal{{ id }}::isTransmitRegisterEmpty()) {
		UartHal{{ id }}::write(data);
		return true;
	} else {
		return false;
	}
%% endif
}

std::size_t
xpcc::kinetis::Uart{{ id }}::write(const uint8_t *data, std::size_t length)
{
	uint32_t i = 0;
	for (; i < length; ++i)
	{
		if (!write(*data++)) {
			return i;
		}
	}
	return i;
}

bool
xpcc::kinetis::Uart{{ id }}::isWriteFinished()
{
%% if parameters.buffered
	return txBuffer.isEmpty() && UartHal{{ id }}::isTransmitRegisterEmpty();
%% else
	return UartHal{{ id }}::isTransmitRegisterEmpty();
%% endif
}

std::size_t
xpcc::kinetis::Uart{{ id }}::discardTransmitBuffer()
{
%% if parameters.buffered
	std::size_t count = 0;
	// disable interrupt since buffer will be cleared
	UartHal{{ id }}::disableInterrupt(UartHal{{ id }}::Interrupt::TxEmpty);
	while(!txBuffer.isEmpty()) {
		++count;
		txBuffer.pop();
	}
	return count;
%% else
	return 0;
%% endif
}

bool
xpcc::kinetis::Uart{{ id }}::read(uint8_t &data)
{
%% if parameters.buffered
	if (rxBuffer.isEmpty()) {
		return false;
	} else {
		data = rxBuffer.get();
		rxBuffer.pop();
		return true;
	}
%% else
	if(UartHal{{ id }}::isReceiveRegisterNotEmpty()) {
		UartHal{{ id }}::read(data);
		return true;
	} else {
		return false;
	}
%% endif
}

std::size_t
xpcc::kinetis::Uart{{ id }}::read(uint8_t *data, std::size_t length)
{
%% if parameters.buffered
	uint32_t i = 0;
	for (; i < length; ++i)
	{
		if (rxBuffer.isEmpty()) {
			return i;
		} else {
			*data++ = rxBuffer.get();
			rxBuffer.pop();
		}
	}
	return i;
%% else
	(void)length; // avoid compiler warning
	if(read(*data)) {
		return 1;
	} else {
		return 0;
	}
%% endif
}

std::size_t
xpcc::kinetis::Uart{{ id }}::discardReceiveBuffer()
{
%% if parameters.buffered
	std::size_t count = 0;
	while(!rxBuffer.isEmpty()) {
		++count;
		rxBuffer.pop();
	}
	return count;
%% else
	return 0;
%% endif
}


%% if parameters.buffered
%% set hal = "xpcc::kinetis::" ~ hal
extern "C" void
UART{{ id }}_RX_TX_IRQHandler(void)
{
	if (UartHal{{ id }}::isReceiveRegisterNotEmpty()) {
		// TODO: save the errors
		uint8_t data;
		UartHal{{ id }}::read(data);
		rxBuffer.push(data);
	}
	if (UartHal{{ id }}::isTransmitRegisterEmpty()) {
		if (txBuffer.isEmpty()) {
			// transmission finished, disable TxEmpty interrupt
			UartHal{{ id }}::disableInterrupt(UartHal{{ id }}::Interrupt::TxEmpty);
		}
		else {
			UartHal{{ id }}::write(txBuffer.get());
			txBuffer.pop();
		}
	}
}
%% endif
