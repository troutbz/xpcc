// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_{{target.family | upper}}_SIMPLE_SPI_HPP
#	error	"Don't include this file directly, use 'simple_spi.hpp' instead!"
#endif

// ----------------------------------------------------------------------------
template< uint32_t baudrate >
void
xpcc::{{target.family}}::SpiSimpleMaster::initialize()
{
	static_assert(F_CPU/2 >= baudrate, "The CPU frequency must be at least 2x higher than SPI baudrate.");
	static_assert(F_CPU/128 <= baudrate, "The SPI baudrate must be at most 128x lower than CPU frequency.");
	
	constexpr uint16_t pre_raw = (F_CPU / baudrate);
	Prescaler prescaler = Prescaler::Div128;
	if (pre_raw >= 128) {
		prescaler = Prescaler::Div128;
	}
	else if (pre_raw >= 64) {
		prescaler = Prescaler::Div64;
	}
	else if (pre_raw >= 32) {
		prescaler = Prescaler::Div32;
	}
	else if (pre_raw >= 16) {
		prescaler = Prescaler::Div16;
	}
	else if (pre_raw >= 8) {
		prescaler = Prescaler::Div8;
	}
	else if (pre_raw >= 4) {
		prescaler = Prescaler::Div4;
	}
	else {
		prescaler = Prescaler::Div2;
	}

	initialize(prescaler);
}

void
xpcc::{{target.family}}::SpiSimpleMaster::initialize(Prescaler prescaler)
{
	SPCR = (1 << SPE) | (1 << MSTR) | (static_cast<uint8_t>(prescaler) & ~0x80);
	SPSR = (static_cast<uint8_t>(prescaler) & 0x80) ? (1 << SPI2X) : 0;
	finished = true;
}

void
xpcc::{{target.family}}::SpiSimpleMaster::setDataMode(DataMode mode)
{
	SPCR = (SPCR & ~0b1100) | (static_cast<uint8_t>(mode) << 2);
}

void
xpcc::{{target.family}}::SpiSimpleMaster::setDataOrder(DataOrder order)
{
	SPCR = (SPCR & ~(1 << DORD)) | (order == DataOrder::LsbFirst ? (1 << DORD) : 0);
}
// ----------------------------------------------------------------------------

uint8_t
xpcc::{{target.family}}::SpiSimpleMaster::writeReadBlocking(uint8_t data)
{
	writeBlocking(data);

	while(!isFinished())
		;
	return getResult();
}

void
xpcc::{{target.family}}::SpiSimpleMaster::writeBlocking(uint8_t data)
{
	while(!isFinished())
		;
	SPDR = data;
}

bool
xpcc::{{target.family}}::SpiSimpleMaster::write(uint8_t data)
{
	if (!isFinished())
		return false;

	SPDR = data;
	return true;
}

uint8_t
xpcc::{{target.family}}::SpiSimpleMaster::getResult()
{
	uint8_t data = SPDR;
	return data;
}

bool
xpcc::{{target.family}}::SpiSimpleMaster::isFinished()
{
	return (SPSR & (1 << SPIF)) && finished;
}
